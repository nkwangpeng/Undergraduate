lno@52 @0  statement   children: [@1 @3 ]         function: int func
lno@52 @1  declaration children: [@2 ]            decl: int i  
lno@52 @2  expression  children: []               expr: int 8
lno@53 @3  statement   children: [@4 @8 @10 ]     stmt: if_else
lno@53 @4  op          children: [@5 ]            op: BOOL
lno@53 @5  op          children: [@6 @7 ]         op: EQ
lno@53 @6  expression  children: []               expr: int i
lno@53 @7  expression  children: []               expr: int 8
lno@54 @8  statement   children: [@9 ]            stmt: return
lno@54 @9  expression  children: []               expr: int 1
lno@56 @10 statement   children: [@11 ]           stmt: return
lno@56 @11 expression  children: []               expr: int 2
lno@60 @12 statement   children: [@13 @14 @18 @20 @22 @39 @42 @46 ]  function: int main
lno@60 @13 declaration children: []               decl: int i  
lno@61 @14 function_callchildren: [@15 @16 ]       function_call: 
lno@61 @15 expression  children: []               expr: string %d
lno@61 @16 op          children: [@17 ]           op: TADDR
lno@61 @17 expression  children: []               expr: int i
lno@62 @18 declaration children: [@19 ]           decl: int result  
lno@62 @19 expression  children: []               expr: int 1
lno@63 @20 declaration children: [@21 ]           decl: int j  
lno@63 @21 expression  children: []               expr: int 1
lno@64 @22 statement   children: [@23 @24 @28 @33 ]  stmt: for
lno@64 @23 expression  children: []               expr: int j
lno@64 @24 op          children: [@25 ]           op: BOOL
lno@64 @25 op          children: [@26 @27 ]       op: SEQ
lno@64 @26 expression  children: []               expr: int j
lno@64 @27 expression  children: []               expr: int i
lno@64 @28 op          children: [@29 @32 ]       op: ASSIGN
lno@64 @29 op          children: [@30 @31 ]       op: ADD
lno@64 @30 expression  children: []               expr: int j
lno@64 @31 expression  children: []               expr: int 1
lno@64 @32 expression  children: []               expr: int j
lno@65 @33 statement   children: [@34 ]           stmt: LB_SCOPE
lno@65 @34 op          children: [@35 @38 ]       op: ASSIGN
lno@65 @35 op          children: [@36 @37 ]       op: MULT
lno@65 @36 expression  children: []               expr: int result
lno@65 @37 expression  children: []               expr: int j
lno@65 @38 expression  children: []               expr: int result
lno@68 @39 declaration children: [@40 ]           decl: int funRet  
lno@68 @40 function_callchildren: [@41 ]           function_call: 
lno@68 @41 statement   children: []               empty: 
lno@69 @42 function_callchildren: [@43 @44 @45 ]   function_call: 
lno@69 @43 expression  children: []               expr: string %d\n%d
lno@69 @44 expression  children: []               expr: int result
lno@69 @45 expression  children: []               expr: int funRet
lno@70 @46 statement   children: [@47 ]           stmt: return
lno@70 @47 expression  children: []               expr: int 0
i:0 0    result:0 1    j:0 2    funRet:0 3    main:0 4    

i:2 0    func:2 1    

